// Generated by CoffeeScript 1.7.1
(function() {
  define(function() {
    var MeshRenderer;
    return MeshRenderer = (function() {
      function MeshRenderer(_arg) {
        this.object = _arg.object;
        this.enabled = true;
        this.arrayType = 'triangles';
        this.vertices = [];
        this.materials = [{}];
      }

      MeshRenderer.prototype.Draw = function(engine) {
        var ctx, i, nil, pos, step, vec3, wv, _i, _j, _len, _len1, _ref, _results;
        ctx = engine.canvas.ctx;
        ctx.lineWidth = this.materials[0].lineWidth || 1;
        ctx.strokeStyle = this.materials[0].strokeStyle || 'rgba(255, 255, 255, .8)';
        ctx.fillStyle = this.materials[0].fillStyle || 'rgba(255, 255, 255, .5)';
        pos = this.object.transform.position;
        wv = [];
        _ref = this.vertices;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          vec3 = _ref[_i];
          wv.push(vec3.Clone().RotateX(this.object.transform.rotation.x).Scale(this.object.transform.localScale).Add(this.object.transform.position));
        }
        step = (function() {
          switch (this.arrayType) {
            case 'triangles':
              return 3;
            case 'quads':
              return 4;
          }
        }).call(this);
        _results = [];
        for ((step > 0 ? (i = _j = 0, _len1 = wv.length) : i = _j = wv.length - 1); step > 0 ? _j < _len1 : _j >= 0; i = _j += step) {
          nil = wv[i];
          ctx.beginPath();
          ctx.moveTo(wv[i].x, wv[i].y);
          ctx.lineTo(wv[i + 1].x, wv[i + 1].y);
          ctx.lineTo(wv[i + 2].x, wv[i + 2].y);
          if (this.arrayType === 'quads') {
            ctx.lineTo(wv[i + 3].x, wv[i + 3].y);
          }
          ctx.closePath();
          ctx.fill();
          _results.push(ctx.stroke());
        }
        return _results;
      };

      return MeshRenderer;

    })();
  });

}).call(this);
