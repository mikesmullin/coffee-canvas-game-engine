// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['../components/Behavior', '../lib/GlTF', '../components/Transform', '../components/MeshRenderer', '../lib/Vector3'], function(Behavior, GlTF, Transform, MeshRenderer, Vector3) {
    var World;
    return World = (function(_super) {
      __extends(World, _super);

      function World() {
        this.name = 'World';
        this.mapRoot = 'models/map1';
        this.map = 'map1.gltf';
        World.__super__.constructor.apply(this, arguments);
      }

      World.prototype.Start = function(engine, cb) {
        return GlTF.LoadMap(this.mapRoot, this.map, cb, (function(_this) {
          return function(name, model_transforms, fill, vertices) {
            var i, nil, obj, _i, _len;
            engine.Log({
              name: name,
              vertices: vertices
            });
            obj = new Behavior;
            obj.name = name;
            obj.transform = new Transform({
              object: obj
            });
            obj.renderer = new MeshRenderer({
              object: obj
            });
            obj.renderer.materials = [
              {
                color: fill
              }
            ];
            for (i = _i = 0, _len = vertices.length; _i < _len; i = _i += 3) {
              nil = vertices[i];
              obj.renderer.vertices.push(Vector3.FromArray(vertices, i).TransformMatrix4(model_transforms[1]).TransformMatrix4(model_transforms[0]).TransformMatrix4([1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).TransformMatrix4([35, 0, 0, 0, 0, 35, 0, 0, 0, 0, 35, 0, 0, 0, 0, 1]).TransformMatrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 180, 320, 0, 1]));
            }
            engine.Bind(obj);
            engine.Log(obj);
            return cb();
          };
        })(this));
      };

      return World;

    })(Behavior);
  });

}).call(this);
