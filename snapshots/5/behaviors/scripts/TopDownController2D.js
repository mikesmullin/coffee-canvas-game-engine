// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/Script', 'lib/Input', 'lib/Vector3'], function(Script, Input, Vector3) {
    var TopDownController2D;
    return TopDownController2D = (function(_super) {
      __extends(TopDownController2D, _super);

      function TopDownController2D() {
        TopDownController2D.__super__.constructor.apply(this, arguments);
        this.CharacterState = {
          Idle: 0,
          Walking: 1,
          Trotting: 2,
          Running: 3
        };
        this._characterState = null;
        this.walkSpeed = 2.0;
        this.trotSpeed = 4.0;
        this.runSpeed = 6.0;
        this.speedSmoothing = 10.0;
        this.rotateSpeed = 500.0;
        this.trotAfterSeconds = 3.0;
        this.moveDirection = Vector3.zero;
        this.verticalSpeed = 0.0;
        this.moveSpeed = 0.0;
        this.collisionFlags = null;
        this.isMoving = false;
        this.walkTimeStart = 0.0;
      }

      TopDownController2D.prototype.Awake = function(engine) {};

      TopDownController2D.prototype.Update = function(engine) {
        var speed, x, y;
        speed = 220.0;
        x = speed * engine.deltaTime * Input.GetAxisRaw('Horizontal');
        y = speed * engine.deltaTime * Input.GetAxisRaw('Vertical');
        if (x !== 0 || y !== 0) {
          this.object.collider.Move(engine, new Vector3(x, y, 0));
        }
        return;
        if (collisionFlags === 0) {
          return 1;
        }
      };

      TopDownController2D.prototype.UpdateSmoothedMovementDirection = function() {
        var cameraTransform, curSmooth, forward, h, isMoving, moveDirection, moveSpeed, movingBack, right, targetDirection, targetSpeed, v, walkTimeStart, wasMoving, _characterState;
        cameraTransform = Camera.main.transform;
        forward = cameraTransform.TransformDirection(Vector3.forward);
        forward.y = 0;
        forward = forward.normalized;
        right = new Vector3(forward.z, 0, -forward.x);
        v = Input.GetAxisRaw("Vertical");
        h = Input.GetAxisRaw("Horizontal");
        if (v < -0.2) {
          movingBack = true;
        } else {
          movingBack = false;
        }
        wasMoving = isMoving;
        isMoving = Mathf.Abs(h > 0.1 || Mathf.Abs(v > 0.1));
        targetDirection = h * right + v * forward;
        if (targetDirection !== Vector3.zero) {
          if (moveSpeed < walkSpeed * 0.9 && grounded) {
            moveDirection = targetDirection.normalized;
          } else {
            moveDirection = Vector3.RotateTowards(moveDirection, targetDirection, rotateSpeed * Mathf.Deg2Rad * Time.deltaTime, 1000);
            moveDirection = moveDirection.normalized;
          }
        }
        curSmooth = speedSmoothing * Time.deltaTime;
        targetSpeed = Mathf.Min(targetDirection.magnitude, 1.0);
        _characterState = CharacterState.Idle;
        if (Input.GetKey(KeyCode.LeftShift || Input.GetKey(KeyCode.RightShift))) {
          targetSpeed *= runSpeed;
          _characterState = CharacterState.Running;
        } else if (Time.time - trotAfterSeconds > walkTimeStart) {
          targetSpeed *= trotSpeed;
          _characterState = CharacterState.Trotting;
        } else {
          targetSpeed *= walkSpeed;
          _characterState = CharacterState.Walking;
        }
        moveSpeed = Mathf.Lerp(moveSpeed, targetSpeed, curSmooth);
        if (moveSpeed < walkSpeed * 0.3) {
          return walkTimeStart = Time.time;
        }
      };

      return TopDownController2D;

    })(Script);
  });

}).call(this);
