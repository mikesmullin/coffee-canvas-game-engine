// Generated by CoffeeScript 1.7.1
(function() {
  define(['lib/GMath'], function(GMath) {
    var Input;
    return Input = (function() {
      function Input() {}

      Input.axis = {
        Vertical: 0,
        Horizontal: 0,
        'Mouse X': 0,
        'Mouse Y': 0
      };

      Input.buttons = {
        'Use': false
      };

      Input.GetAxisRaw = function(axis) {
        return this.axis[axis];
      };

      Input.GetButtonDown = function(button) {
        return this.buttons[button];
      };

      Input.Start = function(engine, cb) {
        var canvas, capturedMouseMove, locked, pixelUnit, pre, prefix, size, startX, startY;
        canvas = engine.canvas.canvas;
        locked = false;
        size = 640;
        pre = canvas.requestPointerLock ? '' : canvas.mozRequestPointerLock ? 'moz' : 'webkit';
        prefix = function(s) {
          if (pre === '') {
            return s;
          } else {
            return pre + s[0].toUpperCase() + s.substr(1);
          }
        };
        canvas.onclick = function() {
          return canvas[prefix('requestPointerLock')]();
        };
        capturedMouseMove = (function(_this) {
          return function(e) {
            _this.axis['Mouse X'] = GMath.clamp(e[prefix('movementX')], -size / 2, size / 2);
            _this.axis['Mouse Y'] = GMath.clamp(e[prefix('movementY')], -size / 2, size / 2);
            return e.preventDefault();
          };
        })(this);
        document.addEventListener(pre + 'pointerlockchange', (function() {
          if (locked = document[prefix('pointerLockElement')] === canvas) {
            return document.addEventListener('mousemove', capturedMouseMove, false);
          } else {
            return document.removeEventListener('mousemove', capturedMouseMove, false);
          }
        }), false);
        document.addEventListener('keydown', ((function(_this) {
          return function(e) {
            if (!locked) {
              return;
            }
            switch (e.keyCode) {
              case 87:
                _this.axis.Vertical = -1.0;
                break;
              case 65:
                _this.axis.Horizontal = -1.0;
                break;
              case 83:
                _this.axis.Vertical = 1.0;
                break;
              case 68:
                _this.axis.Horizontal = 1.0;
                break;
              case 69:
                _this.buttons.Use = true;
            }
            return e.preventDefault();
          };
        })(this)), true);
        document.addEventListener('keyup', ((function(_this) {
          return function(e) {
            if (!locked) {
              return;
            }
            switch (e.keyCode) {
              case 87:
              case 83:
                _this.axis.Vertical = 0;
                break;
              case 65:
              case 68:
                _this.axis.Horizontal = 0;
                break;
              case 69:
                _this.buttons.Use = false;
            }
            return e.preventDefault();
          };
        })(this)), true);
        startX = startY = 0;
        pixelUnit = 200;
        canvas.addEventListener('touchstart', function(e) {
          startX = e.touches[0].pageX;
          startY = e.touches[0].pageY;
          return e.preventDefault();
        });
        canvas.addEventListener('touchend', function(e) {
          var endX, endY;
          endX = e.changedTouches[0].pageX;
          endY = e.changedTouches[0].pageY;
          this.axis['Mouse X'] = GMath.clamp(endX - startX, 0, pixelUnit) / pixelUnit;
          this.axis['Mouse Y'] = GMath.clamp(endY - startY, 0, pixelUnit) / pixelUnit;
          return e.preventDefault();
        });
        return cb();
      };

      return Input;

    })();
  });

}).call(this);
