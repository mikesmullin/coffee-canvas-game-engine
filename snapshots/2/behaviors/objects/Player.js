// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['../components/Behavior', '../components/BoxCollider'], function(Behavior, BoxCollider) {
    var Player;
    return Player = (function(_super) {
      __extends(Player, _super);

      function Player() {
        this.user_id = null;
        this.name = null;
        this.collider = new BoxCollider;
      }

      Player.update = function() {
        var deg, i, name, nil, obj, rad, rot, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = ['player1', 'player2'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          obj = objects[name];
          if (obj.lastX && obj.targetX && obj.lastY && obj.targetY) {
            rad = getAngle(obj.lastX, obj.lastY, obj.targetX, obj.targetY);
            deg = rad2deg(rad);
            console.log({
              name: name,
              deg: deg
            });
            rot = [1, 0, 0, 0, 0, Math.cos(deg), -1 * Math.sin(deg), 0, 0, Math.sin(deg), Math.cos(deg), 0, 0, 0, 0, 1];
            _ref1 = obj.vertices;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              nil = _ref1[i];
              obj.vertices[i] = transform(rot, obj.vertices[i]);
            }
          }
          obj.lastX = obj.targetX = obj.lastY = obj.targetY = null;
          if (obj.xT || obj.yT) {
            if (collidesWith(obj, objects['wall'])) {
              console.log('collide');
            } else if (collidesWith(obj, objects[whoami === 'player1' ? 'player2' : 'player1'])) {
              console.log('collide');
            } else {
              obj.x += obj.xT;
              obj.y += obj.yT;
              if (MULTIPLAYER) {
                socket.send(JSON.stringify({
                  pm: [myid, obj.x, obj.y]
                }));
              }
            }
            _results.push(obj.xT = obj.yT = obj.zT = 0);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return Player;

    })(Behavior);
  });

}).call(this);
