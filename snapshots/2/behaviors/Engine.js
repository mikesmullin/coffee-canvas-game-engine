// Generated by CoffeeScript 1.7.1
(function() {
  define(['async2', 'lib/Time', 'lib/Input', 'lib/Canvas2D'], function(async, Time, Input, Canvas2D) {
    var Engine;
    return Engine = (function() {
      function Engine(_arg) {
        var canvas_id;
        canvas_id = _arg.canvas_id;
        this.canvas = new Canvas2D({
          id: canvas_id
        });
        this.objects = [];
        this.running = false;
      }

      Engine.prototype.Log = function(msg) {
        return console.log(msg);
      };

      Engine.prototype.Info = function(msg, line, color, size) {
        if (line == null) {
          line = 1;
        }
        if (color == null) {
          color = 'white';
        }
        if (size == null) {
          size = 9;
        }
        msg = '' + msg;
        this.canvas.ctx.font = "normal " + size + "px silkscreennormal";
        this.canvas.ctx.fillStyle = color;
        return this.canvas.ctx.fillText(msg, this.canvas.canvas.width - (size * msg.length) - 10, 10 + (line * size));
      };

      Engine.prototype.Run = function() {
        this.running = true;
        this.Log('Starting at ' + (new Date()));
        return this.Trigger('Start', (function(_this) {
          return function() {
            var drawInterval, framesRendered, lastFrameStarted, maxSkipFrames, maxUpdateLatency, nextUpdate, skippedFrames, tick, updateInterval;
            updateInterval = 1000 / _this.canvas.fps;
            maxUpdateLatency = updateInterval * 1;
            drawInterval = 1000 / _this.canvas.fps;
            skippedFrames = 1;
            maxSkipFrames = 5;
            nextUpdate = Time.Now();
            framesRendered = 0;
            _this.fps = 0;
            Time.Interval(1000, function() {
              _this.fps = framesRendered;
              return framesRendered = 0;
            });
            _this.deltaTime = 0;
            lastFrameStarted = 0;
            tick = function() {
              var next, now, sleepTime;
              next = function() {
                if (_this.running) {
                  return requestAnimationFrame(tick);
                }
              };
              now = Time.Now();
              _this.deltaTime = (now - lastFrameStarted) / 1000;
              lastFrameStarted = now;
              if (nextUpdate - maxUpdateLatency > now) {
                nextUpdate = now;
              }
              if (now >= nextUpdate) {
                nextUpdate += updateInterval;
                _this.TriggerSync('Update');
                if (Time.Now() > nextUpdate && skippedFrames < maxSkipFrames) {
                  skippedFrames++;
                } else {
                  _this.TriggerSync('Draw');
                  framesRendered++;
                  skippedFrames = 0;
                }
              } else {
                sleepTime = nextUpdate - now;
                if (sleepTime > 0) {
                  return Time.Delay(sleepTime, next);
                }
              }
              return next();
            };
            return tick();
          };
        })(this));
      };

      Engine.prototype.Start = function(engine, cb) {
        this.started = Time.Now();
        this.time = 0;
        return cb();
      };

      Engine.prototype.Draw = function(engine) {
        this.time = (Time.Now() - this.started) / 1000;
        this.canvas.Clear();
        return this.Info(this.fps, 1, 'lime', 45);
      };

      Engine.prototype.Bind = function(obj) {
        return this.objects.push(obj);
      };

      Engine.prototype.TriggerSync = function(event) {
        var component, obj, _i, _len, _ref, _results;
        if (typeof this[event] === "function") {
          this[event]();
        }
        _ref = this.objects;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          if (!obj.enabled) {
            continue;
          }
          if (typeof obj[event] === "function") {
            obj[event](this);
          }
          _results.push((function() {
            var _base, _j, _len1, _ref1, _ref2, _results1;
            _ref1 = ['renderer'];
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              component = _ref1[_j];
              if ((_ref2 = obj[component]) != null ? _ref2.enabled : void 0) {
                _results1.push(typeof (_base = obj[component])[event] === "function" ? _base[event](this) : void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Engine.prototype.Trigger = function(event, cb) {
        var flow, o, obj, _i, _len;
        flow = new async;
        o = [this].concat(this.objects);
        for (_i = 0, _len = o.length; _i < _len; _i++) {
          obj = o[_i];
          if (obj[event]) {
            ((function(_this) {
              return function(obj) {
                return flow.parallel(function(next) {
                  return obj[event].call(obj, _this, next);
                });
              };
            })(this))(obj);
          }
        }
        return flow.go(function(err) {
          return cb(err);
        });
      };

      return Engine;

    })();
  });

}).call(this);
