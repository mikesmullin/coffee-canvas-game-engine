// Generated by CoffeeScript 1.7.1
(function() {
  define(['lib/GMath'], function(GMath) {
    var Button, Input;
    Button = (function() {
      function Button() {}

      Button.prototype.held = false;

      Button.prototype.isDownFrame = false;

      Button.prototype.isUpFrame = false;

      Button.prototype.up = function() {
        this.held = false;
        return this.isUpFrame = true;
      };

      Button.prototype.down = function() {
        this.held = true;
        return this.isDownFrame = true;
      };

      Button.prototype.clearFrame = function() {
        this.isUpFrame = false;
        return this.isDownFrame = false;
      };

      return Button;

    })();
    Input = (function() {
      function Input() {}

      Input.axis = {
        Vertical: 0,
        Horizontal: 0,
        'Mouse X': 0,
        'Mouse Y': 0
      };

      Input.buttons = {
        'Use': new Button,
        'Fire': new Button,
        'Alt Fire': new Button
      };

      Input.GetAxisRaw = function(axis) {
        return this.axis[axis];
      };

      Input.GetButton = function(button) {
        return this.buttons[button].held;
      };

      Input.GetButtonDown = function(button) {
        return this.buttons[button].isDownFrame;
      };

      Input.GetButtonUp = function(button) {
        return this.buttons[button].isUpFrame;
      };

      Input.FinalUpdate = function(engine) {
        var button, nil, _ref, _results;
        _ref = this.buttons;
        _results = [];
        for (nil in _ref) {
          button = _ref[nil];
          _results.push(button.clearFrame());
        }
        return _results;
      };

      Input.Start = function(engine, cb) {
        var canvas, capturedMouseDown, capturedMouseMove, capturedMouseUp, locked, pixelUnit, pre, prefix, size, startX, startY;
        canvas = engine.canvas.canvas;
        locked = false;
        size = 640;
        pre = canvas.requestPointerLock ? '' : canvas.mozRequestPointerLock ? 'moz' : 'webkit';
        prefix = function(s) {
          if (pre === '') {
            return s;
          } else {
            return pre + s[0].toUpperCase() + s.substr(1);
          }
        };
        canvas.onclick = function() {
          return canvas[prefix('requestPointerLock')]();
        };
        capturedMouseMove = (function(_this) {
          return function(e) {
            _this.axis['Mouse X'] = GMath.clamp(e[prefix('movementX')], -size / 2, size / 2);
            _this.axis['Mouse Y'] = GMath.clamp(e[prefix('movementY')], -size / 2, size / 2);
            return e.preventDefault();
          };
        })(this);
        capturedMouseDown = (function(_this) {
          return function(e) {
            switch (e.button) {
              case 0:
                _this.buttons['Fire'].down();
                break;
              case 2:
                _this.buttons['Alt Fire'].down();
            }
            return e.preventDefault();
          };
        })(this);
        capturedMouseUp = (function(_this) {
          return function(e) {
            switch (e.button) {
              case 0:
                _this.buttons['Fire'].up();
                break;
              case 2:
                _this.buttons['Alt Fire'].up();
            }
            return e.preventDefault();
          };
        })(this);
        document.addEventListener(pre + 'pointerlockchange', (function() {
          if (locked = document[prefix('pointerLockElement')] === canvas) {
            document.addEventListener('mousemove', capturedMouseMove, false);
            document.addEventListener('mousedown', capturedMouseDown, false);
            return document.addEventListener('mouseup', capturedMouseUp, false);
          } else {
            document.removeEventListener('mousemove', capturedMouseMove, false);
            document.addEventListener('mousedown', capturedMouseDown, false);
            return document.addEventListener('mouseup', capturedMouseUp, false);
          }
        }), false);
        document.addEventListener('keydown', ((function(_this) {
          return function(e) {
            if (!locked) {
              return;
            }
            switch (e.keyCode) {
              case 87:
                _this.axis.Vertical = -1.0;
                break;
              case 65:
                _this.axis.Horizontal = -1.0;
                break;
              case 83:
                _this.axis.Vertical = 1.0;
                break;
              case 68:
                _this.axis.Horizontal = 1.0;
                break;
              case 69:
                _this.buttons.Use.down();
            }
            return e.preventDefault();
          };
        })(this)), true);
        document.addEventListener('keyup', ((function(_this) {
          return function(e) {
            if (!locked) {
              return;
            }
            switch (e.keyCode) {
              case 87:
              case 83:
                _this.axis.Vertical = 0;
                break;
              case 65:
              case 68:
                _this.axis.Horizontal = 0;
                break;
              case 69:
                _this.buttons.Use.up();
            }
            return e.preventDefault();
          };
        })(this)), true);
        startX = startY = 0;
        pixelUnit = 100;
        canvas.addEventListener('touchstart', (function(_this) {
          return function(e) {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            return e.preventDefault();
          };
        })(this));
        canvas.addEventListener('touchmove', (function(_this) {
          return function(e) {
            var endX, endY;
            endX = e.changedTouches[0].clientX;
            endY = e.changedTouches[0].clientY;
            _this.axis.Horizontal = GMath.clamp(endX - startX, -pixelUnit, pixelUnit) / pixelUnit;
            _this.axis.Vertical = GMath.clamp(endY - startY, -pixelUnit, pixelUnit) / pixelUnit;
            return e.preventDefault();
          };
        })(this));
        canvas.addEventListener('touchend', (function(_this) {
          return function(e) {
            _this.axis.Vertical = 0;
            _this.axis.Horizontal = 0;
            return e.preventDefault();
          };
        })(this));
        return cb();
      };

      return Input;

    })();
    return Input;
  });

}).call(this);
