// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/Script', 'lib/Vector3', 'lib/GMath', 'lib/Time'], function(Script, Vector3, GMath, Time) {
    var AutoPilot;
    return AutoPilot = (function(_super) {
      __extends(AutoPilot, _super);

      function AutoPilot() {
        AutoPilot.__super__.constructor.apply(this, arguments);
        this.Reseed();
        this.Periodic();
      }

      AutoPilot.prototype.Periodic = function() {
        return Time.Delay(this.seed.i3, (function(_this) {
          return function() {
            _this.Reseed();
            return _this.Periodic();
          };
        })(this));
      };

      AutoPilot.prototype.Reseed = function() {
        var _ref;
        return this.seed = {
          x: GMath.rand(300, 400),
          y: GMath.rand(300, 400),
          i1: GMath.rand(2, 15),
          i2: ((_ref = this.seed) != null ? _ref.i2 : void 0) || GMath.rand(5, 9),
          i3: GMath.rand(2000, 6000),
          r: GMath.rand(1, 10)
        };
      };

      AutoPilot.prototype.OnControllerColliderHit = function(engine, collidingObject) {
        if (3 === GMath.rand(1, 3)) {
          return this.Reseed();
        }
      };

      AutoPilot.prototype.Update = function(engine) {
        var x, y;
        x = 0;
        y = 0;
        if (this.seed.r >= 4) {
          x = engine.deltaTime * GMath.oscillate(this.seed.x, this.seed.i1, 0, engine.time);
          y = engine.deltaTime * GMath.oscillate(this.seed.y, this.seed.i1 / 2, 0, engine.time);
        } else {
          if (this.seed.r === 1 || this.seed.r === 2) {
            x = engine.deltaTime * ((this.seed.x - 350) * 10);
          } else {
            y = engine.deltaTime * ((this.seed.y - 350) * 10);
          }
        }
        this.object.collider.Move(engine, new Vector3(x, y, 0));
        switch (this.object.constructor.name) {
          case 'Monster':
            return this.object.ToggleVisibility(GMath.oscillate(1, this.seed.i2, 1, engine.time) > 1);
          case 'Player':
            return this.object.ToggleFlashlight(GMath.oscillate(1, this.seed.i2, 1, engine.time) > 1);
        }
      };

      return AutoPilot;

    })(Script);
  });

}).call(this);
