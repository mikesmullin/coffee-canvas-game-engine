// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  define(['async2', 'lib/Time', 'lib/Input', 'lib/Canvas2D'], function(async, Time, Input, Canvas2D) {
    var Engine;
    return Engine = (function() {
      function Engine(_arg) {
        var canvas_id;
        canvas_id = _arg.canvas_id;
        this.canvas = new Canvas2D({
          id: canvas_id
        });
        this.objects = [];
        this.running = false;
      }

      Engine.prototype.Log = function(msg) {
        return console.log(msg);
      };

      Engine.prototype.Info = function(msg, line, color, size) {
        if (line == null) {
          line = 1;
        }
        if (color == null) {
          color = 'white';
        }
        if (size == null) {
          size = 9;
        }
        msg = '' + msg;
        this.canvas.ctx.font = "normal " + size + "px silkscreennormal";
        this.canvas.ctx.fillStyle = color;
        return this.canvas.ctx.fillText(msg, this.canvas.canvas.width - (size * msg.length) - 10, 10 + (line * size));
      };

      Engine.prototype.Start = function(engine, cb) {
        this.started = Time.Now();
        this.time = 0;
        return Input.Start(engine, cb);
      };

      Engine.prototype.Run = function() {
        this.running = true;
        this.Log('Starting at ' + (new Date()));
        return this.Trigger('Start', (function(_this) {
          return function() {
            var drawInterval, framesRendered, lastFrameStarted, maxSkipFrames, maxUpdateLatency, nextUpdate, skippedFrames, tick, updateInterval;
            updateInterval = 1000 / _this.canvas.fps;
            maxUpdateLatency = updateInterval * 1;
            drawInterval = 1000 / _this.canvas.fps;
            skippedFrames = 1;
            maxSkipFrames = 5;
            nextUpdate = Time.Now();
            framesRendered = 0;
            _this.fps = 0;
            Time.Interval(1000, function() {
              _this.fps = framesRendered;
              return framesRendered = 0;
            });
            _this.deltaTime = 0;
            lastFrameStarted = 0;
            tick = function() {
              var next, now, sleepTime;
              next = function() {
                if (_this.running) {
                  return requestAnimationFrame(tick);
                }
              };
              now = Time.Now();
              if (lastFrameStarted) {
                _this.deltaTime = (now - lastFrameStarted) / 1000;
              }
              lastFrameStarted = now;
              if (nextUpdate - maxUpdateLatency > now) {
                nextUpdate = now;
              }
              if (now >= nextUpdate) {
                nextUpdate += updateInterval;
                _this.TriggerSync('Update');
                _this.TriggerSync('FinalUpdate');
                if (Time.Now() > nextUpdate && skippedFrames < maxSkipFrames) {
                  skippedFrames++;
                } else {
                  _this.TriggerSync('Draw');
                  _this.TriggerSync('DrawGUI');
                  framesRendered++;
                  skippedFrames = 0;
                }
              } else {
                sleepTime = nextUpdate - now;
                if (sleepTime > 0) {
                  return Time.Delay(sleepTime, next);
                }
              }
              return next();
            };
            return tick();
          };
        })(this));
      };

      Engine.prototype.Update = function(engine) {};

      Engine.prototype.FinalUpdate = function(engine) {
        return Input.FinalUpdate(engine);
      };

      Engine.prototype.Draw = function(engine) {
        this.time = (Time.Now() - this.started) / 1000;
        return this.canvas.Clear();
      };

      Engine.prototype.DrawGUI = function(engine) {
        return this.Info(this.fps, 1, 'lime', 45);
      };

      Engine.prototype.Stop = function(engine) {
        this.running = false;
        return this.TriggerSync('Shutdown');
      };

      Engine.prototype.Shutdown = function(engine) {};

      Engine.prototype.Bind = function(obj) {
        return this.objects.push(obj);
      };

      Engine.prototype.TriggerSync = function() {
        var args, cls, component, event, obj, script, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
        event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        args.unshift(this);
        if ((_ref = this[event]) != null) {
          _ref.apply(this, args);
        }
        _ref1 = this.objects;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          obj = _ref1[_i];
          if (!obj.enabled) {
            continue;
          }
          if ((_ref2 = obj[event]) != null) {
            _ref2.apply(obj, args);
          }
          _ref3 = ['renderer', 'collider'];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            component = _ref3[_j];
            if ((_ref4 = obj[component]) != null ? _ref4.enabled : void 0) {
              if ((_ref5 = obj[component][event]) != null) {
                _ref5.apply(obj[component], args);
              }
            }
          }
          _ref6 = obj.scripts;
          for (cls in _ref6) {
            script = _ref6[cls];
            if (script.enabled) {
              if ((_ref7 = script[event]) != null) {
                _ref7.apply(script, args);
              }
            }
          }
        }
      };

      Engine.prototype.Trigger = function(event, cb) {
        var flow, o, obj, _i, _len;
        flow = new async;
        o = [this].concat(this.objects);
        for (_i = 0, _len = o.length; _i < _len; _i++) {
          obj = o[_i];
          if (obj[event]) {
            ((function(_this) {
              return function(obj) {
                return flow.parallel(function(next) {
                  return obj[event].call(obj, _this, next);
                });
              };
            })(this))(obj);
          }
        }
        return flow.go(function(err) {
          return cb(err);
        });
      };

      return Engine;

    })();
  });

}).call(this);
